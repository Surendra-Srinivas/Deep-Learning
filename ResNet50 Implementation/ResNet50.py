{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras. preprocessing.image import ImageDataGenerator\n",
    "from keras.layers import Activation, BatchNormalization, Conv2D, Add\n",
    "from keras.layers import Input, ZeroPadding2D, MaxPooling2D, AveragePooling2D\n",
    "from keras.layers import Flatten, Dense\n",
    "from keras.models import Model\n",
    "from keras import activations\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from keras.regularizers import l2\n",
    "\n",
    "train_data_gen = ImageDataGenerator(rescale=1./255)\n",
    "validation_data_gen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "train_generator = train_data_gen.flow_from_directory('/Users/surendrasrinivas/Downloads/Emotion Detection/train',target_size=(48,48),batch_size=64,color_mode=\"grayscale\",class_mode='categorical')\n",
    "validation_generator = train_data_gen.flow_from_directory('/Users/surendrasrinivas/Downloads/Emotion Detection/test',target_size=(48,48),batch_size=64,color_mode=\"grayscale\",class_mode='categorical')\n",
    "\n",
    "#class_types = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n",
    "\n",
    "def res_identity(x, filters):\n",
    "    x_skip = x\n",
    "    f1, f2 = filters\n",
    "    # Block 1\n",
    "    x  = Conv2D(f1, kernel_size=(1, 1), strides=(1, 1), padding='valid', kernel_regularizer=l2(0.001))(x)\n",
    "    x = BatchNormalization()(x)\n",
    "    x = Activation(activations.relu)(x)\n",
    "    # Block 2 - Bottle Neck\n",
    "    x = Conv2D(f1, kernel_size=(3, 3), strides=(1, 1), padding='same', kernel_regularizer=l2(0.001))(x)\n",
    "    x = BatchNormalization()(x)\n",
    "    x = Activation(activations.relu)(x)\n",
    "    # Third Block\n",
    "    x = Conv2D(f2, kernel_size=(1, 1), strides=(1, 1), padding='valid', kernel_regularizer=l2(0.001))(x)\n",
    "    x = BatchNormalization()(x)\n",
    "    x = Add()([x, x_skip])\n",
    "    x = Activation(activations.relu)(x)\n",
    "\n",
    "    return x\n",
    "\n",
    "def res_conv(x, s, filters):\n",
    "    x_skip = x\n",
    "    f1, f2 = filters\n",
    "    # First Block\n",
    "    x = Conv2D(f1, kernel_size=(1, 1), strides = (s, s), padding='valid', kernel_regularizer=l2(0.001))(x)\n",
    "    x = BatchNormalization()(x)\n",
    "    x = Activation(activations.relu)(x)\n",
    "    # Second Block - Bottle Neck\n",
    "    x = Conv2D(f1, kernel_size=(3, 3), strides= (1, 1), padding = 'same', kernel_regularizer= l2(0.001))(x)\n",
    "    x = BatchNormalization()(x)\n",
    "    x = Activation(activations.relu)(x)\n",
    "    # Third Block\n",
    "    x = Conv2D(f2, kernel_size=(1, 1), strides=(1, 1), padding='valid', kernel_regularizer= l2(0.001))(x)\n",
    "    x = BatchNormalization()(x)\n",
    "    # Shortcut\n",
    "    x_skip = Conv2D(f2, kernel_size=(1, 1), strides=(s, s), padding='valid', kernel_regularizer= l2(0.001))(x)\n",
    "    x_skip = BatchNormalization()(x_skip)\n",
    "    # Add \n",
    "    x = Add()([x, x_skip])\n",
    "    x = Activation(activations.relu)(x)\n",
    "\n",
    "    return x\n",
    "\n",
    "def resnet50():\n",
    "    input_im = Input(shape=(48, 48, 1))\n",
    "    x = ZeroPadding2D(padding=(3, 3))(input_im)\n",
    "    \n",
    "    x = Conv2D(64, kernel_size=(7, 7), strides=(2, 2))(x)\n",
    "    x = BatchNormalization()(x)\n",
    "    x = Activation(activations.relu)(x)\n",
    "    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n",
    "\n",
    "    x = res_conv(x, s=1, filters=(64, 256))\n",
    "    x = res_identity(x, filters=(64, 256))\n",
    "    x = res_identity(x, filters=(64, 256))\n",
    "\n",
    "    x = res_conv(x , s = 1, filters=(128, 512)) # s=2\n",
    "    x = res_identity(x, filters=(128, 512))\n",
    "    x = res_identity(x, filters=(128, 512))\n",
    "    x = res_identity(x, filters=(128, 512))\n",
    "\n",
    "    x = res_conv(x, s = 1, filters=(256, 1024)) # s=1\n",
    "    x = res_identity(x, filters=(256, 1024))\n",
    "    x = res_identity(x, filters=(256, 1024))\n",
    "    x = res_identity(x, filters=(256, 1024))\n",
    "    x = res_identity(x, filters=(256, 1024))\n",
    "    x = res_identity(x, filters=(256, 1024))\n",
    "\n",
    "    x = res_conv(x, s= 1, filters=(512, 2048)) #s=2\n",
    "    x = res_identity(x, filters=(512, 2048))\n",
    "    x = res_identity(x, filters=(512, 2048))\n",
    "\n",
    "    x = AveragePooling2D((2, 2), padding = 'same')(x)\n",
    "    x = Flatten()(x)\n",
    "    x = Dense(7, activation='softmax', kernel_initializer='he_normal')(x)\n",
    "\n",
    "    model = Model(inputs = input_im, outputs= x, name='ResNet50')\n",
    "\n",
    "    return model\n",
    "    \n",
    "model = resnet50()\n",
    "model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate =1e-5), metrics = ['accuracy'])\n",
    "final = model.fit(train_generator,steps_per_epoch=28709 // 64, epochs=10, validation_data= validation_generator, validation_steps=7178 // 64) \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.2 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
